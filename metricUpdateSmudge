#!/bin/sh
# Author: MarkusWessjohann
# Date: 19.10.2018
# Desc: Metric git keyword substitution Smudge
#       Inserts : 
#       * Complexity
#       * LOC
#       * # Commits
#       * techn. Debt


file="$1"

. metricUpdateFunc.sh

setAllBreakPoints

countCommits "$file"

cat - | \
awk -- 'BEGIN {
loc=0;
techDebtLineNr=0;
locLineNr=0;
metricLineNr=0;
commitLineNr=0;
complexity=0; 
techDebt=0;
commits='$commits';
breakPointComplexity='$breakPointComplexity'; 
breakPointLoc='$breakPointLoc'; 
breakPointCommits='$breakPointCommits'; 
breakPointTechDebt='$breakPointTechDebt'; 
}
// { line[NR]=$0 ;}
/^[\t]+/ { match($0, "[^\t]");complexity+=RSTART;}
/^[ ]+/ { match($0, "[^ ]");complexity+=(RSTART/2);}
/# Loc *:.*#/ {locLineNr=NR}
/# tech. Debt *:.*#/ {techDebtLineNr=NR}
/# Complexity *:.*#/ {metricLineNr=NR}
/# Commits *:.*#/ {commitLineNr=NR}

END { 
loc=NR; 
 operator="<";
 alert=" ";
 if (loc > breakPointLoc) {
    techDebt++;
    operator=">";
    alert="!";
 }
if (locLineNr> 0) {
  newString=sprintf("# Loc        : %1s %4d %s %4d #", alert, loc, operator, breakPointLoc);
  sub("# Loc *:.*#", newString, line[locLineNr]);
}
 operator="<";
 alert=" ";
 if (complexity > breakPointComplexity) {
    techDebt++;
    operator=">";
    alert="!";
 }
if (metricLineNr> 0) {
  newString=sprintf("# Complexity : %1s %4d %s %4d #", alert, complexity, operator, breakPointComplexity);
  sub("# Complexity *:.*#", newString, line[metricLineNr]);
}
 operator="<";
 alert=" ";
 if (commits > breakPointCommits) {
    techDebt++;
    operator=">";
    alert="!";
 }
if (commitLineNr> 0) {
  newString=sprintf("# Commits    : %1s %4d %s %4d #", alert, commits, operator, breakPointCommits);
  sub("# Commits *:.*#", newString, line[commitLineNr]);
}
 alert=" ";
 if (techDebt > breakPointtechDebt) {
    alert="!";
 }
if (techDebtLineNr> 0) {
  newString=sprintf("# tech. Debt : %1s %4d #", alert, techDebt);
  sub("# tech. Debt *:.*#", newString, line[techDebtLineNr]);
}
for(i=1;i<=NR;i++) 
  printf("%s\n",line[i]);
}'


